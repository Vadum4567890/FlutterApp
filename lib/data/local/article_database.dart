// lib/data/local/article_database.dart

import 'package:my_project/models/article.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

/// A utility class for managing article data in a SQLite database.
class ArticleDatabase {
  /// Returns a Future that resolves to the database instance.
  /// If the database does not exist, it will be created.
  static Future<Database> get database async {
    return openDatabase(
      join(await getDatabasesPath(), 'articles.db'),
      onCreate: (db, version) {
        // Create the 'articles' table with an auto-incrementing primary key.
        return db.execute(
          'CREATE TABLE articles(id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, content TEXT, author TEXT, imagePath TEXT)',
        );
      },
      version: 1,
    );
  }

  /// Inserts a new article into the database.
  /// The database will automatically generate an ID for the new article.
  /// Returns the generated ID.
  static Future<int> insertArticle(Article article) async {
    final db = await database;
    // Use toMapWithoutId() to ensure the ID is not provided, letting the DB auto-increment.
    final id = await db.insert(
      'articles',
      article.toMapWithoutId(),
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
    return id; // Return the ID generated by the database
  }

  /// Retrieves all articles from the database.
  /// Returns a list of [Article] objects.
  static Future<List<Article>> articles() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('articles');
    // Convert the list of maps to a list of Article objects.
    // Article.fromMap now assumes 'id' is always an int from the database.
    return List.generate(maps.length, (i) {
      return Article.fromMap(maps[i]);
    });
  }

  /// Deletes an article from the database by its ID.
  static Future<void> deleteArticle(int id) async {
    final db = await database;
    await db.delete(
      'articles',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  /// Updates an existing article in the database.
  /// The article's ID is used to identify the record to be updated.
  static Future<void> updateArticle(Article article) async {
    final db = await database;
    // Use toMap() which includes the ID for updating.
    await db.update(
      'articles',
      article.toMap(),
      where: 'id = ?',
      whereArgs: [article.id],
    );
  }
}
